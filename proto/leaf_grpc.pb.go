// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: leaf.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LeafService_SignUp_FullMethodName = "/leaf.LeafService/SignUp"
	LeafService_SignIn_FullMethodName = "/leaf.LeafService/SignIn"
)

// LeafServiceClient is the client API for LeafService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeafServiceClient interface {
	SignUp(ctx context.Context, in *UserCredential, opts ...grpc.CallOption) (*AuthToken, error)
	SignIn(ctx context.Context, in *UserCredential, opts ...grpc.CallOption) (*AuthToken, error)
}

type leafServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeafServiceClient(cc grpc.ClientConnInterface) LeafServiceClient {
	return &leafServiceClient{cc}
}

func (c *leafServiceClient) SignUp(ctx context.Context, in *UserCredential, opts ...grpc.CallOption) (*AuthToken, error) {
	out := new(AuthToken)
	err := c.cc.Invoke(ctx, LeafService_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leafServiceClient) SignIn(ctx context.Context, in *UserCredential, opts ...grpc.CallOption) (*AuthToken, error) {
	out := new(AuthToken)
	err := c.cc.Invoke(ctx, LeafService_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeafServiceServer is the server API for LeafService service.
// All implementations must embed UnimplementedLeafServiceServer
// for forward compatibility
type LeafServiceServer interface {
	SignUp(context.Context, *UserCredential) (*AuthToken, error)
	SignIn(context.Context, *UserCredential) (*AuthToken, error)
	mustEmbedUnimplementedLeafServiceServer()
}

// UnimplementedLeafServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeafServiceServer struct {
}

func (UnimplementedLeafServiceServer) SignUp(context.Context, *UserCredential) (*AuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedLeafServiceServer) SignIn(context.Context, *UserCredential) (*AuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedLeafServiceServer) mustEmbedUnimplementedLeafServiceServer() {}

// UnsafeLeafServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeafServiceServer will
// result in compilation errors.
type UnsafeLeafServiceServer interface {
	mustEmbedUnimplementedLeafServiceServer()
}

func RegisterLeafServiceServer(s grpc.ServiceRegistrar, srv LeafServiceServer) {
	s.RegisterService(&LeafService_ServiceDesc, srv)
}

func _LeafService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeafServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeafService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeafServiceServer).SignUp(ctx, req.(*UserCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeafService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeafServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeafService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeafServiceServer).SignIn(ctx, req.(*UserCredential))
	}
	return interceptor(ctx, in, info, handler)
}

// LeafService_ServiceDesc is the grpc.ServiceDesc for LeafService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeafService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaf.LeafService",
	HandlerType: (*LeafServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _LeafService_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _LeafService_SignIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leaf.proto",
}
